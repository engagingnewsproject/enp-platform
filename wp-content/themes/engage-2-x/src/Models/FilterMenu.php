<?php

/**
 * Set data needed for tile layout page.
 */

namespace Engage\Models;

/**
 * Class FilterMenu
 *
 * Manages the creation and organization of filter menus for different post types and taxonomies.
 *
 * @package Engage\Models
 */
class FilterMenu
{
	/**
	 * The title of the filter menu.
	 *
	 * @var string
	 */
	public $title = '';
	/**
	 * The slug identifier for the filter menu.
	 *
	 * @var string
	 */
	public $slug = '';
	/**
	 * Array of filters applied in the menu.
	 *
	 * @var array
	 */
	public $filters = [];

	/**
	 * Array of post types that the filter menu is applied to.
	 *
	 * @var array
	 */
	public $postTypes = [];

	/**
	 * Array of taxonomies that the filter menu is applied to.
	 *
	 * @var array
	 */
	public $taxonomies = [];

	/**
	 * Structure format for organizing posts (by default, 'postTypes').
	 *
	 * @var string
	 */
	public $structure = 'postTypes';

	/**
	 * Array of posts to be filtered.
	 *
	 * @var array
	 */
	public $posts = [];

	/**
	 * Base URL or slug for links generated by the filter menu.
	 *
	 * @var string
	 */
	public $linkBase;

	/**
	 * Instance of the urlConstructor class used for generating custom links.
	 *
	 * @var urlConstructor
	 */
	public $urlConstructor;

	/**
	 * Array of manually defined links added to the filter menu.
	 *
	 * @var array
	 */
	public $manualLinks;

	/**
	 * Structure format for organizing taxonomies.
	 *
	 * @var string
	 */
	public $taxonomyStructure;

	/**
	 * Constructor to initialize the FilterMenu object with provided options.
	 *
	 * @param array $options Array of options to configure the filter menu.
	 */
	public function __construct($options)
	{
		$defaults = [
			'title' => 'Categories',
			'slug' => 'categories-menu',
			'taxonomies' => [],
			'taxonomyStructure'  => 'postTypes',
			'postTypes'  => [],
			'posts' => [],
			'manualLinks' => [],
			'linkBase'  => 'postType'
		];

		$options = array_merge($defaults, $options);
		$this->title = $options['title'];
		$this->slug = $options['slug'];
		$this->posts = $options['posts'];
		$this->taxonomies = $options['taxonomies'];
		$this->postTypes = $options['postTypes'];
		$this->taxonomyStructure = $options['taxonomyStructure'];
		$this->urlConstructor = new urlConstructor();
		$this->linkBase =  $options['linkBase'];
		$this->structure = 'postTypes';
		$this->manualLinks = $options['manualLinks'];
	}

	/**
	 * Build the filter menu by setting filters, adding manual links, and pruning empty filters.
	 *
	 * @return array The completed filter menu.
	 */
	public function build()
	{
		$this->filters = $this->setFilters();
		$this->addManualLinks();
		$this->pruneEmptyFilters();
		return $this->filters;
	}

	/**
	 * Retrieve the filters currently applied to the filter menu.
	 *
	 * @return array Array of filters.
	 */
	public function getFilters()
	{
		return $this->filters;
	}

	/**
	 * Build the base filter structure for the menu.
	 *
	 * @return array The base structure of the filter menu.
	 */
	public function buildBaseFilter()
	{
		$base = [
			'title' => $this->title,
			'slug'  => $this->slug,
			'structure' => $this->structure,
			'link'  => false,
			'terms' => []
		];
		// Get current category, if any (fallback to vertical for backward compatibility)
		$category = $this->urlConstructor->getQueriedCategory();
		$vertical = $this->urlConstructor->getQueriedVertical();
		$term = $category ? $category : $vertical;

		// add all the taxonomies in the order that they were created
		foreach ($this->postTypes as $postType) {
			$postType = get_post_type_object($postType);
			// check if this taxonomy already exists in the filters
			if (!isset($base['terms'][$postType->name])) {

				$base['terms'][$postType->name] = [
					'title' => $postType->labels->name,
					'slug'  => $postType->name,
					'link'  => $this->urlConstructor->getTermLink([
						'terms' => [
							$term
						],
						'postType' =>  $postType->name,
						'base'  => $term && $term->taxonomy === 'category' ? 'postType' : $this->linkBase
					]),
					'terms' => []
				];
			}
		}
		return $base;
	}

	/**
	 * Set the filters by going through all posts and getting the terms they belong to.
	 *
	 * @return array The filters applied to the filter menu.
	 */
	public function setFilters()
	{
		$filters = $this->buildBaseFilter();

		foreach ($this->posts as $post) {
			// get all the terms
			foreach ($this->taxonomies as $taxonomy) {
				$filters = $this->buildFilter($filters, $post->ID, $taxonomy);
			}
		}

		return $filters;
	}

	/**
	 * Build a filter term for a specific post based on its taxonomy.
	 *
	 * @param array $filters The current array of filters.
	 * @param int|string $postID The ID of the post.
	 * @param string $taxonomy The taxonomy to filter by.
	 * @return array The updated filters with the new term added.
	 */
	public function buildFilter($filters, $postID, $taxonomy)
	{

		$terms = get_the_terms($postID, $taxonomy);

		// Get current category or vertical
		$category = $this->urlConstructor->getQueriedCategory();
		$vertical = $this->urlConstructor->getQueriedVertical();
		$term = $category ? $category : $vertical;

		// get post type of the taxonomy
		$postType = $this->urlConstructor->getPostTypeByTaxonomy($taxonomy);


		if (empty($terms)) {
			return $filters;
		}

		// set the terms
		foreach ($terms as $term) {
			if (!isset($filters['terms'][$postType]['terms'][$term->slug]) && $term->slug !== 'uncategorized') {
				$filters['terms'][$postType]['terms'][$term->slug] = $this->buildFilterTerm($term, $vertical, $postType);
			}
		}

		return $filters;
	}

	/**
	 * Build a filter term array for a specific term.
	 *
	 * @param object $term The term object to build the filter for.
	 * @param mixed $vertical The vertical taxonomy term.
	 * @param mixed $postType The post type associated with the term.
	 * @return array The filter term array.
	 */
	public function buildFilterTerm($term, $vertical = false, $postType = false)
	{
		// If the term is a category and we're using the new URL structure
		if ($term->taxonomy === 'category') {
			return  [
				'ID'    => $term->term_id,
				'slug'  => $term->slug,
				'title' => $term->name,
				'description' => $term->description,
				'link'  => $this->urlConstructor->getTermLink(
					[
						'terms' => [
							$term
						],
						'postType' => $postType,
						'base'  => 'postType' // Always use postType as the base for categories
					]
				),
				'count' => $term->count,
				'taxonomy' => $term->taxonomy
			];
		}

		// For other taxonomies, use the existing logic
		return [
			'ID'    => $term->term_id,
			'slug'  => $term->slug,
			'title' => $term->name,
			'description' => $term->description,
			'link'  => $this->urlConstructor->getTermLink(
				[
					'terms' => [
						$vertical,
						$term
					],
					'postType' => $postType,
					'base'  => $this->linkBase
				]
			),
			'count' => $term->count,
			'taxonomy' => $term->taxonomy
		];
	}

	/**
	 * Add manually defined links to the filter menu.
	 *
	 * @return void
	 */
	public function addManualLinks()
	{
		if ($this->manualLinks) {
			foreach ($this->manualLinks as $key => $val) {
				$this->filters['terms'][$key] = $val;
			}
		}
	}

	/**
	 * Prune filters with empty terms from the filter menu.
	 *
	 * @return void
	 */
	public function pruneEmptyFilters()
	{
		foreach ($this->filters['terms'] as $key => $val) {
			if (isset($val['terms']) && empty($val['terms'])) {
				unset($this->filters['terms'][$key]);
			}
		}
	}
}
